 学习 https://www.liaoxuefeng.com/wiki/896043488029600/900004111093344

笔记  
 日常三部曲                      
      git add .  
      git commit -m ""
      git push 
  
 状态三命令
      git status 

      git log 
      
      git reflog

git安装
     国内镜像网站 https://npm.taobao.org/mirrors/git-for-windows/

 配置用户名 邮箱
     git config --global user.name "名字"
     git config --global user.email "邮箱"
 生成公匙
     ssh-keygen -t rsa -C "******@qq.com" 
     .pub文件用来提交github

 创建本地版本库或者从github上创建仓库
     建一个文件夹 然后进入创建的文件夹
     git int 创建一个git可以管理的仓库 

分支管理
    git branch             查看分支
 
    git branch <name>      创建分支

    git checkout <name>    切换分支

    git checkout -b <name> 创建+切换分支

    git branch -d <name>   删除分支 有改变未提交使用-D强行删除

    git merge <name>       合并某分支到当前分支 快速合并fast forward 看不出来曾经做过合并

    git  merge --no-ff -m "" 不使用快速合并 可以看出来做过合并 所以需要加-m 分支合并图根上边也不一样
   
    git log --graph        可以看到分支合并图 *代表每次提交 最左边事主分支提交靠右是别的分支提交
    
    
    当两个分支修改同一个文件的同一个内容时 合并会冲突 需要手动更改冲突 Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
                                                    <<<<<<< HEAD
                                                    Creating a new branch is quick & simple.
                                                    =======
                                                    Creating a new branch is quick AND simple.
                                                    >>>>>>> feature1

日常使用 
     git add 文件名        将文件修改添加到暂存区 git对文件建立追踪
     git add.              添加所有未追踪文件

     git commit  -m ""     提交到当前分支 -m后面为提交说明 
     git status            查看仓库当前状态  
     git diff   文件名     如果git status告诉你有文件被修改过 用gitdiff 查看更改了什么 

 版本回退及撤销
    撤销

    未追踪文件直接右键删除

     add之前 

     git  checkout -- 文件名  撤销最近一次修改 --后边必须加空格 
     

     commit之前 

     git reset HEAD 文件名  将文件返回到工作区 HEAD指向当前工作版本 是git reset --mixed特殊用法

    版本回退

     git log                  用git log可以查看提交历史，以便确定要回退到哪个版本
     git reflog               用git reflog查看命令历史，以便确定要回到未来的哪个版本

     git reset --hard commit_id  回退版本 工作区暂存区都不保留 版本差异清除 
     git reset --soft            保留当前工作区和暂存区 将版本差异放在暂存区 再commit之后与reset之前没区别 工作区内容不变 暂存区为回退之前暂存区内容和版本差异内容
     git reset --mixed           只保留工作区  将版本差异放在工作区 add.commit之后与reset之前一样 如果工作区和暂存区有东西 所有东西都在工作区  --mixed可以省略
     git reset HEAD              把当前版本所有暂存区东西放到工作区 与上一条一样 HEAD表示当前版本commitID 
    soft一般用作合并一些频繁的commit 方便log查看commit 
    mixed一般用作提交过的东西出错需要修改时 

    

 推送远程 
     git remote -v 查看所有主机名及地址 
     git remote rm 主机名 删除主机 
     git remote add 主机名 主机地址    添加主机 

     
     git push -u 主机名 本地分支:远程分支        建立追踪关系  建立与主机联系 后边可以省略主机名 
     git push -u 主机名 分支名                                 如果本地分支名=远程分支名可以只写一个名字
     git branch --set-upstream-to = origin/test  建立(修改)追踪关系  建立本地仓test 并与远程主机origin的test分支建立追踪关系 
     
     git push                                    将现在所在分支推送到有追踪关系的远程分支  push之前可以git status查看是否关联主机

  
     git push origin :远程分支名                 删除远程分支
    
     push失败先 git pull 拉取远程最新版本 再push 还不行手动更改本地与远程冲突文件内容后push

打标签

     git tag <tagname>                          用于新建一个标签，默认为HEAD，也可以指定一个commit id 比如 git tag <tagname> commitID

     git tag -a <tagname> -m "blablabla..."     可以指定标签信息

     git push origin <tagname>                  可以推送一个本地标签；

     git push origin --tags可                   以推送全部未推送过的本地标签；

     git tag -d <tagname>                       可以删除一个本地标签；
     
     git push origin :refs/tags/v0.9            删除远程分支 要先用-d删除本地 
     

配简写

      git config --global alias.缩写 命令名
      git config --global alias.st status         git st 等于 git status
      git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"  log的更明显看法

-- - --空格
    Unix/Linux 命令中，- 后一般跟短命令选项（通常是单字母，也有一些命令是例外的），-- 后一般跟长命令选项。如果只有一个单独的--，后面不紧跟任何选项，则表示命令选项结束，后续的都作为命令的参数而不是选项。例如：

    git checkout -- filename filename作为git checkout 的参数，而不是选项。
